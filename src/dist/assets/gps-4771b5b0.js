import{G as M,h as d,j as a,Y as ie,F as e,$ as t,i as n,_ as le,m as S,E as O,H as R,x as C,T as ge}from"./index-9715db87.js";const N={};N.initialize=async function(G){M.active_tab="gps",await d.promise(a.MSP_FEATURE_CONFIG),await d.promise(a.MSP_GPS_CONFIG);const A=ie(e.CONFIG.activeSensors,"mag");L();function L(){t("#content").load("./tabs/gps.html",Q)}function y(){t("#connect").hide(),t("#waiting").show(),t("#loadmap").hide()}function P(){t("#connect").show(),t("#waiting").hide(),t("#loadmap").hide()}function Q(){n.localizePage();function W(){d.send_message(a.MSP_RAW_GPS,!1,!1,B)}function B(){d.send_message(a.MSP_COMP_GPS,!1,!1,V)}function V(){d.send_message(a.MSP_GPS_SV_INFO,!1,!1,A?z:U)}function z(){d.send_message(a.MSP_RAW_IMU,!1,!1,U)}let x=!1;const $=t(".tab-gps .features");e.FEATURE_CONFIG.features.generateElements($);const E=()=>t(".gpsSettings").toggle(e.FEATURE_CONFIG.features.isEnabled("GPS"));t("input.feature",$).on("change",function(){const s=t(this);e.FEATURE_CONFIG.features.updateData(s),le(e.FEATURE_CONFIG.features),s.attr("name")==="GPS"&&E()}),E();const f=["NMEA","UBLOX","MSP"],H=["115200","57600","38400","19200","9600"],F=[n.getMessage("gpsSbasAutoDetect"),n.getMessage("gpsSbasEuropeanEGNOS"),n.getMessage("gpsSbasNorthAmericanWAAS"),n.getMessage("gpsSbasJapaneseMSAS"),n.getMessage("gpsSbasIndianGAGAN")];S.gte(e.CONFIG.apiVersion,O)&&F.push(n.getMessage("gpsSbasNone"));const D=t("select.gps_protocol"),q=t('input[name="gps_auto_baud"]'),X=t(".gps_auto_baud"),v=t('input[name="gps_auto_config"]'),j=t(".gps_auto_config"),J=t('input[name="gps_ublox_galileo"]'),Y=t(".gps_ublox_galileo"),w=t("select.gps_ubx_sbas"),Z=t(".gps_ubx_sbas"),K=t('input[name="gps_home_once"]'),I=t("select.gps_baudrate");for(let s=0;s<f.length;s++)D.append(`<option value="${s}">${f[s]}</option>`);D.change(function(){e.GPS_CONFIG.provider=parseInt(t(this).val()),v.change()}).val(e.GPS_CONFIG.provider).change(),S.lt(e.CONFIG.apiVersion,R)&&q.prop("checked",e.GPS_CONFIG.auto_baud===1),v.on("change",function(){const s=t(this).is(":checked"),c=e.GPS_CONFIG.provider===f.indexOf("UBLOX"),m=e.GPS_CONFIG.provider===f.indexOf("MSP"),u=s&&c&&S.gte(e.CONFIG.apiVersion,O);Y.toggle(u);const T=s&&c;Z.toggle(T),X.toggle((c||m)&&S.lt(e.CONFIG.apiVersion,R)),j.toggle(c||m)}).prop("checked",e.GPS_CONFIG.auto_config===1).trigger("change"),J.change(function(){e.GPS_CONFIG.ublox_use_galileo=t(this).is(":checked")?1:0}).prop("checked",e.GPS_CONFIG.ublox_use_galileo>0).change();for(let s=0;s<F.length;s++)w.append(`<option value="${s}">${F[s]}</option>`);w.change(function(){e.GPS_CONFIG.ublox_sbas=parseInt(t(this).val())}).val(e.GPS_CONFIG.ublox_sbas),t(".gps_home_once").toggle(S.gte(e.CONFIG.apiVersion,O)),K.change(function(){e.GPS_CONFIG.home_point_once=t(this).is(":checked")?1:0}).prop("checked",e.GPS_CONFIG.home_point_once>0).change();for(const s of H)I.append(`<option value="${s}">${s}</option>`);I.prop("disabled",!0),I.parent().hide();function U(){const s=e.GPS_DATA.lat/1e7,c=e.GPS_DATA.lon/1e7,m=`https://maps.google.com/?q=${s},${c}`,u=A?Math.atan2(e.SENSOR_DATA.magnetometer[1],e.SENSOR_DATA.magnetometer[0]):void 0,T=u===void 0?0:u*180/Math.PI,ee=e.GPS_DATA.ground_course/100,te=["GPS","SBAS","Galileo","BeiDou","IMES","QZSS","Glonass"],se=["gnssQualityNoSignal","gnssQualitySearching","gnssQualityAcquired","gnssQualityUnusable","gnssQualityLocked","gnssQualityFullyLocked","gnssQualityFullyLocked","gnssQualityFullyLocked"],ne=["gnssUsedUnused","gnssUsedUsed"];let ae=e.GPS_DATA.alt;t(".GPS_info span.colorToggle").text(e.GPS_DATA.fix?n.getMessage("gpsFixTrue"):n.getMessage("gpsFixFalse")),t(".GPS_info span.colorToggle").toggleClass("ready",e.GPS_DATA.fix!=0);const k=n.getMessage("gpsPositionUnit");t(".GPS_info td.alt").text(`${ae} m`),t(".GPS_info td.latLon a").prop("href",m).text(`${s.toFixed(6)} / ${c.toFixed(6)} ${k}`),t(".GPS_info td.heading").text(`${T.toFixed(4)} / ${ee.toFixed(4)} ${k}`),t(".GPS_info td.speed").text(`${e.GPS_DATA.speed} cm/s`),t(".GPS_info td.sats").text(e.GPS_DATA.numSat),t(".GPS_info td.distToHome").text(`${e.GPS_DATA.distanceToHome} m`);const r=t("div.GPS_signal_strength table");if(r.html(""),r.append(`
                <tr class="titles">
                    <td style="text-align: left;  width: 12%;" i18n="gpsSignalGnssId">${n.getMessage("gpsSignalGnssId")}</td>
                    <td style="text-align: center;width: 10%;" i18n="gpsSignalSatId">${n.getMessage("gpsSignalSatId")}</td>
                    <td style="text-align: center;width: 25%;" i18n="gpsSignalStr">${n.getMessage("gpsSignalStr")}</td>
                    <td style="text-align: left;  width: 17%;" i18n="gpsSignalStatus">${n.getMessage("gpsSignalStatus")}</td>
                    <td style="text-align: left;  width: 33%;" i18n="gpsSignalQuality">${n.getMessage("gpsSignalQuality")}</td>
                </tr>
            `),e.GPS_DATA.chn.length<=16){for(let o=0;o<e.GPS_DATA.chn.length;o++)r.append(`
                        <tr>
                            <td>-</td>
                            <td>${e.GPS_DATA.svid[o]}</td>
                            <td><meter value="${e.GPS_DATA.cno[o]}" max="55"></meter></td>
                            <td>${e.GPS_DATA.quality[o]}</td>
                        </tr>
                    `);for(let o=e.GPS_DATA.chn.length;o<32;o++)r.append(`
                        <tr>
                            <td>-</td>
                            <td>-</td>
                            <td><meter value="0" max="55"></meter></td>
                            <td> </td>
                        </tr>
                    `)}else{let oe=Math.min(32,e.GPS_DATA.chn.length)||32;for(let i=0;i<oe;i++){let l="";if(e.GPS_DATA.chn[i]<=6?l+=`<td>${te[e.GPS_DATA.chn[i]]}</td>`:l+="<td>-</td>",e.GPS_DATA.chn[i]>=7)l+="<td>-</td>",l+='<td><meter value="0" max="55"></meter></td>',l+="<td> </td>";else{l+=`<td>${e.GPS_DATA.svid[i]}</td>`,l+=`<td><meter value="${e.GPS_DATA.cno[i]}" max="55"></meter></td>`;let g=n.getMessage(se[e.GPS_DATA.quality[i]&7]),_=n.getMessage(ne[(e.GPS_DATA.quality[i]&8)>>3]),b="";g.startsWith(n.getMessage("gnssQualityFullyLocked"))?(b="locked",g=`<span class="colorToggle ready">${g}</span>`):g.startsWith(n.getMessage("gnssQualityLocked"))?(b="notReady",g=`<span class="colorToggle locked">${g}</span>`):g=`<span class="colorToggle">${g}</span>`,_.startsWith(n.getMessage("gnssUsedUsed"))?_=`<span class="colorToggle ready">${_}</span>`:_=`<span class="colorToggle ${b}">${_}</span>`,l+=`<td style="text-align: left;  width: 17%;">${_}</td>
                                       <td style="text-align: left;  width: 33%;">${g}</td>`}r.append(`<tr>${l}</tr>`)}}const h={action:"center",lat:s,lon:c,heading:u};p=document.getElementById("map"),navigator.onLine?(t("#connect").hide(),e.GPS_DATA.fix?(x=!0,h.action=A?"centerMag":"center",p.contentWindow&&p.contentWindow.postMessage(h,"*"),t("#loadmap").show(),t("#waiting").hide()):x?(h.action="nofix",p.contentWindow&&p.contentWindow.postMessage(h,"*")):(t("#loadmap").hide(),t("#waiting").show())):(x=!1,P())}let p=document.getElementById("map");M.interval_add("gps_pull",function(){W()},75,!0),navigator.onLine?(console.log("Online"),y()):(console.log("Offline"),P()),t("#check").on("click",function(){navigator.onLine?(console.log("Online"),y()):(console.log("Offline"),P())}),t("#zoom_in").click(function(){console.log("zoom in");const s={action:"zoom_in"};p.contentWindow.postMessage(s,"*")}),t("#zoom_out").click(function(){console.log("zoom out");const s={action:"zoom_out"};p.contentWindow.postMessage(s,"*")}),t("a.save").on("click",async function(){e.GPS_CONFIG.auto_baud=t('input[name="gps_auto_baud"]').is(":checked")?1:0,e.GPS_CONFIG.auto_config=t('input[name="gps_auto_config"]').is(":checked")?1:0,await d.promise(a.MSP_SET_FEATURE_CONFIG,C.crunch(a.MSP_SET_FEATURE_CONFIG)),await d.promise(a.MSP_SET_GPS_CONFIG,C.crunch(a.MSP_SET_GPS_CONFIG)),C.writeConfiguration(!0)}),M.content_ready(G)}};N.cleanup=function(G){G&&G()};ge.gps=N;export{N as gps};
